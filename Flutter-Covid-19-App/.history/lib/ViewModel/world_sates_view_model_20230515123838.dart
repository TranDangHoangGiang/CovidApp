import 'dart:convert';
import 'package:covid_tracker/Model/covid.dart';
import 'package:http/http.dart' as http;

class Autogenerateddata {
  Future<Autogenerated> fetchWorldRecords() async {
    final response = await http.get(Uri.parse('https://static.pipezero.com/covid/data.json'));

    if (response.statusCode == 200) {
      var data = jsonDecode(response.body);
      return Autogenerated.fromJson(data);
    } else {
      throw Exception('Error');
    }
  }
  Future<Autogenerated> fetchCityRecords(String city) async {
  final response = await http.get(Uri.parse('https://static.pipezero.com/covid/data.json'));

  if (response.statusCode == 200) {
    var data = jsonDecode(response.body);

    // Lọc danh sách locations dựa trên thành phố được truyền vào
    var filteredLocations = data['locations'].where((location) => location['name'] == city);

    // Xử lý dữ liệu filteredLocations và trả về đối tượng Autogenerated
    // Tạo các biến để lưu trữ các giá trị tương ứng từ filteredLocations
    var cases = 0;
    var deaths = 0;
    var recovered = 0;
    var treating = 0;

    if (filteredLocations.isNotEmpty) {
      cases = filteredLocations.first['cases'];
      deaths = filteredLocations.first['death'];
      recovered = filteredLocations.first['recovered'];
      treating = filteredLocations.first['treating'];
    }

    // Tạo đối tượng Autogenerated với dữ liệu mới
    var autogenerated = Autogenerated(
      total: Total(
        internal: Internal(
          death: deaths,
          treating: treating,
          cases: cases,
          recovered: recovered,
        ),
        world: data['total']['world'], // Dữ liệu tổng quốc gia không thay đổi
      ),
      // Các trường rest of Autogenerated có thể giữ nguyên từ dữ liệu cũ
      // ...
    );

    return autogenerated;
  } else {
    throw Exception('Error');
  }
}



 
}
